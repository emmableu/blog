(window.webpackJsonp=window.webpackJsonp||[]).push([[506],{878:function(e,t,o){"use strict";o.r(t);var n=o(9),i=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Basically, you want to implement a mechanism for "),t("a",{attrs:{href:"http://en.wikipedia.org/wiki/Double_dispatch",target:"_blank",rel:"noopener noreferrer"}},[e._v("double dispatch"),t("OutboundLink")],1),e._v(". Each node in your AST would need to implement an "),t("code",[e._v("accept()")]),e._v(" method (NOT a "),t("code",[e._v("visit()")]),e._v(" method). The method takes, as an argument, a visitor object. In the implementation of this "),t("code",[e._v("accept()")]),e._v(" method, you call a "),t("code",[e._v("visit()")]),e._v(" method of the visitor object (there will be one for each AST node type; in Java, you'll use parameter overloading, in Python I suppose you can use different "),t("code",[e._v("visit_*()")]),e._v(" methods). The correct visitor will then be dispatched with the correct Node type as argument.")])])}),[],!1,null,null,null);t.default=i.exports}}]);
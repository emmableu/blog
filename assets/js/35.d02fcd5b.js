(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{405:function(t,s,a){"use strict";a.r(s);var n=a(9),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LC link"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/dong-tai-gui-hua-er-fen-cha-zhao-tan-xin-suan-fa-p/",target:"_blank",rel:"noopener noreferrer"}},[t._v("explanation"),s("OutboundLink")],1),s("br"),t._v("\n对照题：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://emmableu.github.io/blog/pages/0b3805/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Maximum Profit in Job Scheduling"),s("OutboundLink")],1)])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/300-0.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"solution"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#solution"}},[t._v("#")]),t._v(" Solution")]),t._v(" "),s("h3",{attrs:{id:"_1-基础算法-dp-o-n-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础算法-dp-o-n-2"}},[t._v("#")]),t._v(" 1. 基础算法： DP, O(n^2)")]),t._v(" "),s("ol",[s("li",[t._v("定义状态：dp[i] 表示：以 nums[i] 结尾 的「上升子序列」的长度。注意：这个定义中 nums[i] 必须被选取，且必须是这个子序列的最后一个元素；")]),t._v(" "),s("li",[t._v("状态转移方程：如果一个较大的数接在较小的数后面，就会形成一个更长的子序列。只要 nums[i] 严格大于在它位置之前的某个数，那么 nums[i] 就可以接在这个数后面形成一个更长的上升子序列。"),s("code",[t._v("dp[i] = max(dp[j] + 1 for j < i if nums[j] < nums[i])")])]),t._v(" "),s("li",[t._v("初始化：dp 长度为 len(nums), dp[i] = 1，1 个字符显然是长度为 1 的上升子序列。")]),t._v(" "),s("li",[t._v("输出：不能返回最后一个状态值，最后一个状态值只表示以 nums[len - 1] 结尾的「上升子序列」的长度，状态数组 dp 的最大值才是题目要求的结果。")]),t._v(" "),s("li",[t._v("空间优化：遍历到一个新数的时候，之前所有的状态值都得保留，因此无法优化空间。")])]),t._v(" "),s("p",[t._v("复杂度分析：")]),t._v(" "),s("ul",[s("li",[t._v("时间复杂度：O(N^2)，这里 N 是数组的长度，我们写了两个 for 循环，每个 for 循环的时间复杂度都是线性的；")]),t._v(" "),s("li",[t._v("空间复杂度：O(N)，要使用和输入数组长度相等的状态数组，因此空间复杂度是 O(N)。")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lengthOfLIS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        dp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            curmax "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    curmax "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curmax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curmax\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h3",{attrs:{id:"_2-进阶算法-修改状态定义-同时用到了贪心算法、二分查找-o-n-lg-n"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-进阶算法-修改状态定义-同时用到了贪心算法、二分查找-o-n-lg-n"}},[t._v("#")]),t._v(" 2. 进阶算法：修改状态定义（同时用到了贪心算法、二分查找, O(n lg(n))")]),t._v(" "),s("p",[t._v("状态设计思想：依然着眼于某个上升子序列的结尾的元素，如果已经得到的上升子序列的结尾的数越小，那么遍历的时候后面接上一个数，会有更大的可能构成一个长度更长的上升子序列。既然结尾越小越好，我们可以记录"),s("strong",[t._v("在长度固定的情况下，结尾最小的那个元素的数值")]),t._v("，这样定义以后容易得到「状态转移方程」。"),s("br"),t._v("\n为了与「方法二」的状态定义区分，将状态数组命名为 tail。")]),t._v(" "),s("h4",{attrs:{id:"_1-定义新状态-特别重要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义新状态-特别重要"}},[t._v("#")]),t._v(" 1. 定义新状态（特别重要）")]),t._v(" "),s("p",[t._v("tail[i] 表示：长度为 i + 1 的"),s("strong",[t._v("所有")]),t._v("上升子序列的结尾的最小值。\n说明："),s("br"),t._v("\n数组 tail 不是问题中的「最长上升子序列」（下文还会强调），不能命名为 LIS。数组 tail 只是用于求解 LIS 问题的状态数组；以题目中的示例为例 [10, 9, 2, 5, 3, 7, 101, 18],")]),t._v(" "),s("ul",[s("li",[t._v("tail[0] 表示长度为 1 的所有上升子序列中，结尾最小的元素的数值, 所以 tail[0] = 1")]),t._v(" "),s("li",[t._v("tail[1] 表示长度为 2 的所有上升子序列中，结尾最小的是子序列的最后一个元素的数值。结尾最小的子序列为 [2, 3] ，因此 tail[1] = 3；"),s("br"),t._v("\n下标和长度有数值为 1 的偏差；")])]),t._v(" "),s("h4",{attrs:{id:"_2-状态转移方程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-状态转移方程"}},[t._v("#")]),t._v(" 2. 状态转移方程：")]),t._v(" "),s("p",[t._v("数组 tail 也是一个严格上升数组。原因是：")]),t._v(" "),s("ul",[s("li",[t._v("如果不是一个严格上升数组，即对于任意的下标 i < j ，存在某个 tail[i] >= tail[j]，")]),t._v(" "),s("li",[t._v("对于此处的 tail[i] 而言，对应一个上升子序列 [a0, a1, ..., ai], tail[i] = ai;")]),t._v(" "),s("li",[t._v("对于此处的 tail[j] 而言，对应一个上升子序列 [b0, b1, ..., bj], tail[j] = bj;")])]),t._v(" "),s("p",[t._v("由于 tail[i] >= tail[j], 等价于 ai >= bj. 而在上升子序列 [b0, b1,.., bi, ..bj]中， bi 严格小于 bj, 所以有 ai >= bj > bi, 那么上升子序列 [b0, b1, ..., bi] 是一个长度为 i + 1 但是结尾更小的数组， 与 tail[i] = ai 的定义矛盾")]),t._v(" "),s("p",[t._v("所以， tail是一个严格上升数组。")]),t._v(" "),s("p",[t._v("因为只需要维护状态数组 tail 的定义，它的长度就是最长上升子序列的长度。下面说明在遍历中，如何维护状态数组 tail 的定义。")]),t._v(" "),s("ol",[s("li",[t._v("在遍历数组 nums 的过程中，看到一个新数 num，如果这个数 严格 大于有序数组 tail 的最后一个元素，就把 num 放在有序数组 tail 的后面，否则进入第 2 点；\n"),s("ul",[s("li",[t._v("注意：这里的大于是「严格大于」，不包括等于的情况。")])])]),t._v(" "),s("li",[t._v("在有序数组 tail 中查找第 1 个等于大于 num 的那个数，试图让它变小；\n"),s("ul",[s("li",[t._v("如果有序数组 tail 中存在 等于 num 的元素，什么都不做，因为以 num 结尾的最短的「上升子序列」已经存在；")]),t._v(" "),s("li",[t._v("如果有序数组 tail 中存在 大于 num 的元素，找到第 1 个，让它变小，这样我们就找到了一个"),s("strong",[t._v("结尾更小的相同长度")]),t._v("的上升子序列。")])])])]),t._v(" "),s("ul",[s("li",[t._v("说明：\n"),s("ul",[s("li",[t._v("我们再看一下数组 tail[i] 的定义：长度为 i + 1 的 所有 最长上升子序列的结尾的最小值。因此，在遍历的过程中，我们试图让一个大的值变小是合理的；")]),t._v(" "),s("li",[t._v("这一步可以认为是「贪心算法」，总是做出在当前看来最好的选择，当前「最好的选择」是：当前只让第 1 个严格大于 nums[i] 的数变小，变成 nums[i]，这一步操作是「无后效性」的；")]),t._v(" "),s("li",[t._v("由于是在有序数组中的操作，因此可以使用「二分查找算法」。")])])])]),t._v(" "),s("h4",{attrs:{id:"_3-初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-初始化"}},[t._v("#")]),t._v(" 3. 初始化")]),t._v(" "),s("p",[t._v("遍历第 1 个数 nums[0]，直接放在有序数组 tail 的开头 tail[0] = nums[0]。")]),t._v(" "),s("h4",{attrs:{id:"_4-输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-输出"}},[t._v("#")]),t._v(" 4. 输出")]),t._v(" "),s("p",[t._v("有序数组 tail 的长度，就是所求的「最长上升子序列」的长度。")]),t._v(" "),s("h4",{attrs:{id:"_5-空间优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-空间优化"}},[t._v("#")]),t._v(" 5. 空间优化")]),t._v(" "),s("p",[t._v("无法优化空间。")]),t._v(" "),s("h4",{attrs:{id:"以-10-9-2-5-3-7-101-18-为例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以-10-9-2-5-3-7-101-18-为例"}},[t._v("#")]),t._v(" 以 [10, 9, 2, 5, 3, 7, 101, 18] 为例")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/300-1.png",alt:""}}),t._v(" "),s("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/300-2.png",alt:""}}),t._v(" "),s("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/300-3.png",alt:""}}),t._v(" "),s("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/300-4.png",alt:""}}),t._v(" "),s("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/300-5.png",alt:""}}),t._v(" "),s("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/300-6.png",alt:""}})]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" bisect\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lengthOfLIS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        tail "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                idx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bisect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bisect_left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n                    tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("复杂度分析：")]),t._v(" "),s("ul",[s("li",[t._v("时间复杂度：O(NlogN)，遍历数组使用了 O(N)，二分查找法使用了 O(logN)。")]),t._v(" "),s("li",[t._v("空间复杂度：O(N)，开辟有序数组 tail 的空间至多和原始数组一样。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{434:function(t,s,n){"use strict";n.r(s);var e=n(9),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"和-1650-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和-1650-区别"}},[t._v("#")]),t._v(" 和 1650 区别：")]),t._v(" "),s("p",[t._v("这个没有向上的"),s("code",[t._v("parent")]),t._v("指针， 只有标准的"),s("code",[t._v("left")]),t._v(","),s("code",[t._v("right")]),t._v("指针。")]),t._v(" "),s("h2",{attrs:{id:"description"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description:")]),t._v(" "),s("p",[t._v("Given two nodes of a binary tree p and q, return their lowest common ancestor (LCA).")]),t._v(" "),s("p",[t._v("Each node will have a reference to its parent node. The definition for Node is below:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Node {\n    public int val;\n    public Node left;\n    public Node right;\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v('According to the definition of LCA on Wikipedia: "The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself)."')]),t._v(" "),s("h2",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"solution-postorder-traversal-后序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#solution-postorder-traversal-后序遍历"}},[t._v("#")]),t._v(" Solution: postorder traversal 后序遍历")]),t._v(" "),s("p",[s("code",[t._v("lowestCommonAncestor")]),t._v("的实际含义：根据不同的情况，返回下面三种不同的值："),s("br"),t._v("\n令 tree 为 以当前root为根的树")]),t._v(" "),s("ul",[s("li",[t._v("p，q都在tree内，返回他们最近公共祖先")]),t._v(" "),s("li",[t._v("p，q都不在tree内，返回none")]),t._v(" "),s("li",[t._v("只有p在tree内，q不在tree内，返回p")]),t._v(" "),s("li",[t._v("只有q在tree内，p不在tree内，返回q\n根据这个定义，"),s("strong",[t._v("最近公共祖先是在后序遍历的过程中，第一次一个root的左，右子树都有返回值的时候产生")]),t._v("，这个时候，这个root就是最近公共祖先。所以我们只要把这个最近公共祖先一层一层返回推上去就好。")])]),t._v(" "),s("p",[t._v("对应代码和下图理解：")]),t._v(" "),s("p",[t._v("以下图为例，p=4，q=7:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("      1\n    /   \\\n   2     3\n  /\\    / \\\n 4  5  6   7\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("ul",[s("li",[s("code",[t._v("4")]),t._v(": 先走 1-2-4，4 == p, 4这个点为root时返回4")]),t._v(" "),s("li",[s("code",[t._v("5")]),t._v(": 再 走 5-None，5的下一个点（none）为root时返回none，然后传上去，5也返回none")]),t._v(" "),s("li",[s("code",[t._v("2")]),t._v(": 对于 2 这个点，他的left不是none，right是none，返回left = 4")]),t._v(" "),s("li",[s("code",[t._v("6")]),t._v(": 再 3-6-none，6的下一个点（none）为root时返回none，然后传上去，6也返回none")]),t._v(" "),s("li",[s("code",[t._v("7")]),t._v(": 再 7，发现root == q，返回 7")]),t._v(" "),s("li",[s("code",[t._v("3")]),t._v(": 对于3这个点，它的left 是none right不是，所以返回right = 7")]),t._v(" "),s("li",[s("code",[t._v("1")]),t._v(": 对于 1这个点，它的left = 4， right = 7 都有值，所以返回 1它自己")])]),t._v(" "),s("p",[t._v("以上后序遍历的返回值标在对应的节点上")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("        1\n    /      \\\n   4        7\n  /\\       / \\\n 4 none none   7\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lowestCommonAncestor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TreeNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TreeNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TreeNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" TreeNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" root "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n        left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lowestCommonAncestor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lowestCommonAncestor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" right\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" left\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{439:function(s,t,n){"use strict";n.r(t);var e=n(9),a=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/nested-list-weight-sum/",target:"_blank",rel:"noopener noreferrer"}},[s._v("LC link"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"description"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[s._v("#")]),s._v(" Description")]),s._v(" "),t("p",[s._v("You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists.")]),s._v(" "),t("p",[s._v("The depth of an integer is the number of lists that it is inside of. For example, the nested list "),t("code",[s._v("[1,[2,2],[[3],2],1]")]),s._v(" has each integer's value set to its depth.")]),s._v(" "),t("p",[s._v("Return the sum of each integer in "),t("code",[s._v("nestedList")]),s._v(" multiplied by its depth.")]),s._v(" "),t("h2",{attrs:{id:"examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[s._v("#")]),s._v(" Examples")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Example 1:\nInput: nestedList = [[1,1],2,[1,1]]\nOutput: 10\nExplanation: Four 1's at depth 2, one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 = 10.\n\nExample 2:\nInput: nestedList = [1,[4,[6]]]\nOutput: 27\nExplanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1*1 + 4*2 + 6*3 = 27.\n\nExample 3:\nInput: nestedList = [0]\nOutput: 0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h2",{attrs:{id:"solution"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#solution"}},[s._v("#")]),s._v(" Solution")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("depthSum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nestedList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" List"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("NestedInteger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        res "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dfs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("depth"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ele"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nonlocal")]),s._v(" res\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" ele"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("isInteger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                res "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" ele"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getInteger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" depth\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" child "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" ele"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                dfs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("depth "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" child"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" ele "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" nestedList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            dfs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ele"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" res\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This is the interface that allows for creating nested lists.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You should not implement it, or speculate about its implementation")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#class NestedInteger:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    def __init__(self, value=None):")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#        """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        If value is not specified, initializes an empty list.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        Otherwise initializes a single integer equal to value.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#        """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    def isInteger(self):")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#        """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        @return True if this NestedInteger holds a single integer, rather than a nested list.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        :rtype bool")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#        """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    def add(self, elem):")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#        """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        :rtype void")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#        """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    def setInteger(self, value):")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#        """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        Set this NestedInteger to hold a single integer equal to value.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        :rtype void")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#        """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    def getInteger(self):")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#        """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        @return the single integer that this NestedInteger holds, if it holds a single integer")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        Return None if this NestedInteger holds a nested list")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        :rtype int")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#        """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    def getList(self):")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#        """')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        @return the nested list that this NestedInteger holds, if it holds a nested list")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        Return None if this NestedInteger holds a single integer")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        :rtype List[NestedInteger]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#        """')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br")])])])}),[],!1,null,null,null);t.default=a.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{386:function(t,s,a){"use strict";a.r(s);var n=a(9),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"题目汇总"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目汇总"}},[t._v("#")]),t._v(" 题目汇总")]),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/tags/?tag=bfs/"}},[t._v("bfs tag")])],1),t._v(" "),s("h3",{attrs:{id:"other-bfs-题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#other-bfs-题"}},[t._v("#")]),t._v(" Other BFS 题")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/pages/e07ce0/"}},[t._v("116 - 847 - Shortest Path Visiting All Nodes - Hard")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/pages/3f6b14/"}},[t._v("059 - 1345 - Jump Game IV - Hard")])],1)]),t._v(" "),s("h3",{attrs:{id:"网格-bfs-题目汇总"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网格-bfs-题目汇总"}},[t._v("#")]),t._v(" 网格 bfs 题目汇总：")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/pages/0128c7/"}},[t._v("1293 - Shortest Path in a Grid with Obstacles Elimination")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/pages/345ffc/"}},[t._v("064 - 317-Shortest Distance from All Buildings")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/pages/430b76/"}},[t._v("257 - 286-Walls and Gates")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/pages/2c27e5/"}},[t._v("182 - 1091-Shortest Path in Binary Matrix")])],1)]),t._v(" "),s("h4",{attrs:{id:"双向bfs-单双向答案都有"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双向bfs-单双向答案都有"}},[t._v("#")]),t._v(" 双向BFS (单双向答案都有):")]),t._v(" "),s("ul",[s("li",[t._v("网格：\n"),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/pages/9f0a29/"}},[t._v("1284 - Minimum Number of Flips to Convert Binary Matrix to Zero Matrix - Hard")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/pages/7322b2/"}},[t._v("1263 - Minimum Moves to Move a Box to Their Target Location")])],1)])])]),t._v(" "),s("h3",{attrs:{id:"dijkstra-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra-算法"}},[t._v("#")]),t._v(" dijkstra 算法")]),t._v(" "),s("p",[s("strong",[t._v("注意，dijkstra的BFS, add to vis 和 return 不能写在扩散的过程中，要写在heappop的时候，这样才能保证最后得到的结果是最小的。")])]),t._v(" "),s("p",[t._v("为什么add to vis 也要放在heappop里面？因为可能会有多条路径走到target，这时如果提前add to vis，别的路径就不会被放进heap 里面。具体见 "),s("RouterLink",{attrs:{to:"/pages/895d5d/"}},[t._v("085.085 - 499 - The Maze III - Hard (minimum path for ball to target hole)")])],1),t._v(" "),s("p",[t._v("注意： q里面每个tuple一般最少需要三个元素 (dist, r, c)")]),t._v(" "),s("p",[t._v("vis里面一般每个tuple 只要两个元素就行了 (r, c)")]),t._v(" "),s("p",[t._v("模版题： -  "),s("RouterLink",{attrs:{to:"/pages/895d5d/"}},[t._v("085.085 - 499 - The Maze III - Hard (minimum path for ball to target hole)")])],1),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/pages/c2e0c3/"}},[t._v("778-Swim in Rising Water")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/pages/6803ad/"}},[t._v("1102-Path With Maximum Minimum Value (path with highest score)")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/pages/4197de/"}},[t._v("1631 - Path With Minimum Effort")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/pages/30c1c5/"}},[t._v("118 - 1514 - Path with Maximum Probability - Medium")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/pages/4cbe0d/"}},[t._v("407 - Trapping Rain Water II - Hard")])],1)]),t._v(" "),s("h2",{attrs:{id:"单向bfs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单向bfs"}},[t._v("#")]),t._v(" 单向bfs")]),t._v(" "),s("h3",{attrs:{id:"_1-层序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-层序遍历"}},[t._v("#")]),t._v(" 1.层序遍历")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("void BFS()\n{\n    判断边界条件，是否能直接返回结果的。\n\n    定义队列，其中有一个元素是起始位置\n\n    定义备忘录(visited)，用于记录已经访问的位置，其中有一个元素是起始位置\n\n    初始化step = 0,根据在哪里返回step，step也可能初始化为-1\n\n    while (队列不为空) {\n        获取当前队列中的元素个数。\n        step += 1\n        for (元素个数) {\n            取出一个位置节点。(e.g., ele = q.popleft())\n            # (一般来说写在扩散过程中) 判断是否到达终点位置, 如果是，返回 step \n            获取它对应的下一个所有的节点。\n            如果当前扩散结果 == target:\n                return step\n            如果当前扩散结果 not in vis:\n                过滤\n                当前的扩散结果加入temp。\n                visited.add() \n        }\n    }\n    返回 (如果是search，则可能是返回-1)\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br")])]),s("h2",{attrs:{id:"bfs中对扩散结果进行过滤的几个常见判断条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bfs中对扩散结果进行过滤的几个常见判断条件"}},[t._v("#")]),t._v(" bfs中对扩散结果进行过滤的几个常见判断条件：")]),t._v(" "),s("ul",[s("li",[t._v("是否在vis里面")]),t._v(" "),s("li",[t._v("是否在界内 （尤其是网格bfs）")]),t._v(" "),s("li",[t._v("是否是一个障碍物 （例如shortest distance 和推箱子题）")])]),t._v(" "),s("h4",{attrs:{id:"注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意：")]),t._v(" "),s("ul",[s("li",[t._v("如果是每一个step要遍历多个元素，那么往往是 while q, 例如 "),s("RouterLink",{attrs:{to:"/pages/0128c7/"}},[t._v("1293 - Shortest Path in a Grid with Obstacles Elimination")])],1),t._v(" "),s("li",[t._v("如果是每一个step遍历一个元素，那么有的时候 while true 就行了，例如两个dijkstra 算法题：\n"),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/pages/c2e0c3/"}},[t._v("778-Swim in Rising Water")]),t._v(" 要用heapq")],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/pages/4197de/"}},[t._v("1631 - Path With Minimum Effort")]),t._v(" vis标记要注意不仅仅是x，y坐标")],1)])])]),t._v(" "),s("h2",{attrs:{id:"双向bfs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双向bfs"}},[t._v("#")]),t._v(" 双向bfs")]),t._v(" "),s("h3",{attrs:{id:"最短距离-把queue改成hashset来判断两个集合是否有交集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最短距离-把queue改成hashset来判断两个集合是否有交集"}},[t._v("#")]),t._v(" 最短距离：把queue改成hashset来判断两个集合是否有交集")]),t._v(" "),s("ul",[s("li",[t._v("遍历前，判断 len(q1 & q2) 是否 > 0 (if q1 & q2)")]),t._v(" "),s("li",[t._v("每次遍历：把q1,q2中短的那个叫做q1，只遍历q1")]),t._v(" "),s("li",[t._v("遍历的最后：把当前的扩散结果(temp)赋值给q1")])]),t._v(" "),s("p",[t._v("相关题：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://emmableu.github.io/blog/pages/ea20ba/",target:"_blank",rel:"noopener noreferrer"}},[t._v("word ladder"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://emmableu.github.io/blog/pages/a4eef7",target:"_blank",rel:"noopener noreferrer"}},[t._v("minimum knight moves"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://labuladong.gitbook.io/algo/mu-lu-ye/bfs-kuang-jia",target:"_blank",rel:"noopener noreferrer"}},[t._v("labuladong的模版"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bfs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    q1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("起始点"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    q2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("target位置"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" q1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" q2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    vis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("起始点，target位置"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# visited")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" vis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" q2\n    step "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" q1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" q2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 哈希集合在遍历过程中不能修改，用temp存储扩散结果")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            q2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q2\n        temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        step "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" cur "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" q1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            获取它对应的下一个所有的节点。\n            如果当前扩散结果 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" q2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" step\n            如果当前扩散结果 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" vis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                当前的扩散结果加入temp。\n                visited"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n        \n        q1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br")])]),s("h2",{attrs:{id:"注意-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意-2"}},[t._v("#")]),t._v(" 注意：")]),t._v(" "),s("p",[t._v("以下的写法会报错：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("但是, 下面两种都是对的")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);
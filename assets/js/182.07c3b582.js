(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{559:function(s,t,e){"use strict";e.r(t);var r=e(9),a=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/minimum-insertions-to-balance-a-parentheses-string/",target:"_blank",rel:"noopener noreferrer"}},[s._v("LC link"),t("OutboundLink")],1)]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/1541-0.png",alt:""}}),s._v(" "),t("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/1541-1.png",alt:""}})]),s._v(" "),t("h2",{attrs:{id:"solution"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#solution"}},[s._v("#")]),s._v(" solution")]),s._v(" "),t("p",[t("code",[s._v("res")]),s._v(": 已经添加的左/右括号数"),t("br"),s._v(" "),t("code",[s._v("right")]),s._v(":需要的右括号数")]),s._v(" "),t("ol",[t("li",[s._v("遇到 ） 时：\n"),t("ul",[t("li",[s._v("如果遇到 ）， right --")]),s._v(" "),t("li",[s._v("如果right< 0, 需要:\n"),t("ul",[t("li",[s._v("在这个点之前加一个 （")]),s._v(" "),t("li",[s._v("然后 "),t("code",[s._v("right += 2; res += 1")])])])])])]),s._v(" "),t("li",[s._v("遇到（ 时：\n"),t("ul",[t("li",[s._v("检查当前需要的右括号数"),t("code",[s._v("right")]),s._v("是不是奇数\n"),t("ul",[t("li",[s._v("如果是奇数，那么要先再补上一个right让他变成偶数, 然后因为已经人工补上了右括号，所以 "),t("code",[s._v("res += 1")]),s._v(", 表示记得这里补上过一个， "),t("code",[s._v("right-= 1")]),s._v("， 因为已经路过了这个新补上的right。")])])]),s._v(" "),t("li",[s._v("然后（奇偶都要）right += 2"),t("br"),s._v("\n最后返回 "),t("code",[s._v("right + res")]),s._v("\nExample 1: Consider "),t("code",[s._v("((()(")]),s._v(",n= 5 ,i=0,1...4")])])])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("i=0")]),s._v(", we have "),t("code",[s._v("(")]),s._v(" it means we need two right parenthesis (they are in pair) so.. "),t("code",[s._v("right+=2 => res =0, right =2")])]),s._v(" "),t("li",[t("code",[s._v("i=1")]),s._v(", again we have "),t("code",[s._v("(")]),s._v(" it means we need two right parenthesis (they are in pair) so.. "),t("code",[s._v("right+=2 => res =0, right =4")])]),s._v(" "),t("li",[t("code",[s._v("i=2")]),s._v(", again we have "),t("code",[s._v("(")]),s._v(" it means we need two right parenthesis (they are in pair) so.. right+=2 => res =0, right =6")]),s._v(" "),t("li",[t("code",[s._v("i=3")]),s._v(", we have "),t("code",[s._v(")")]),s._v(" we subtract one from right. so.. "),t("code",[s._v("right-- => res =0, right =5")])]),s._v(" "),t("li",[t("code",[s._v("i=4")]),s._v(", we have "),t("code",[s._v("(")]),s._v(" but here right is odd so we need to make it even with "),t("code",[s._v("right--")]),s._v(" and increment "),t("code",[s._v("res++")]),s._v(" => "),t("code",[s._v("res =1, right =4")]),s._v(". Also, as we have got a left parenthesis then we need two right parenthesis (they are in pair) so.. "),t("code",[s._v("right+=2 => res =1, right =6")])])]),s._v(" "),t("p",[s._v("finally ans is "),t("code",[s._v("res + right => 1 +6 == 7")])]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("minInsertions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        res "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'('")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                    right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n                    res "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n                right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("')'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                    right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n                    res "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" res\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])])])}),[],!1,null,null,null);t.default=a.exports}}]);
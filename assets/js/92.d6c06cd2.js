(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{460:function(t,s,a){"use strict";a.r(s);var n=a(9),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("source"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://en.wikipedia.org/wiki/String_searching_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("字符串匹配"),s("OutboundLink")],1),t._v("是计算机的基本任务之一。")]),t._v(" "),s("p",[t._v('举例来说，有一个字符串"BBC ABCDAB ABCDABCDABDE"，我想知道，里面是否包含另一个字符串"ABCDABD"？')]),t._v(" "),s("p",[t._v("许多算法可以完成这个任务，"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Knuth-Morris-Pratt算法"),s("OutboundLink")],1),t._v("（简称KMP）是最常用的之一。它以三个发明者命名，起头的那个K就是著名科学家Donald Knuth。")]),t._v(" "),s("p",[t._v("这种算法不太容易理解，网上有很多"),s("a",{attrs:{href:"https://www.google.com/search?q=Knuth-Morris-Pratt+algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("解释"),s("OutboundLink")],1),t._v("，但读起来都很费劲。直到读到"),s("a",{attrs:{href:"http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jake Boxer"),s("OutboundLink")],1),t._v("的文章，我才真正理解这种算法。下面，我用自己的语言，试图写一篇比较好懂的KMP算法解释。")]),t._v(" "),s("img",{attrs:{width:"520",alt:"image",src:"https://user-images.githubusercontent.com/41789327/183357837-58c8d83a-19ad-4624-8cff-39f0cc9eb829.png"}}),t._v(" "),s("p",[t._v('首先，字符串"BBC ABCDAB ABCDABCDABDE"的第一个字符与搜索词"ABCDABD"的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。')]),t._v(" "),s("img",{attrs:{width:"524",alt:"image",src:"https://user-images.githubusercontent.com/41789327/183357867-fad369f6-dd45-46b8-816c-03acf9b38eec.png"}}),t._v(" "),s("p",[t._v("因为B与A不匹配，搜索词再往后移。")]),t._v(" "),s("img",{attrs:{width:"508",alt:"image",src:"https://user-images.githubusercontent.com/41789327/183357927-0f409a2c-6dda-447c-bfad-fd6c6a18ff58.png"}}),t._v(" "),s("p",[t._v("就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。")]),t._v(" "),s("img",{attrs:{width:"507",alt:"image",src:"https://user-images.githubusercontent.com/41789327/183357961-9aa9a640-e2ce-49b0-949b-2c1633a6f936.png"}}),t._v(" "),s("p",[t._v("接着比较字符串和搜索词的下一个字符，还是相同。")]),t._v(" "),s("img",{attrs:{width:"524",alt:"image",src:"https://user-images.githubusercontent.com/41789327/183357985-4670b8dd-6f8f-45bc-9e45-217f1d47f972.png"}}),t._v(" "),s("p",[t._v("直到字符串有一个字符，与搜索词对应的字符不相同为止。")]),t._v(" "),s("img",{attrs:{width:"515",alt:"image",src:"https://user-images.githubusercontent.com/41789327/183359901-3a9db6c5-e12f-4598-b45a-5a883e2c380c.png"}}),t._v(" "),s("p",[t._v('这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做虽然可行，但是效率很差，因为你要把"搜索位置"移到已经比较过的位置，重比一遍。')]),t._v(" "),s("img",{attrs:{width:"524",alt:"image",src:"https://user-images.githubusercontent.com/41789327/183357985-4670b8dd-6f8f-45bc-9e45-217f1d47f972.png"}}),t._v(" "),s("p",[t._v('一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是"ABCDAB"。KMP算法的想法是，设法利用这个已知信息，不要把"搜索位置"移回已经比较过的位置，继续把它向后移，这样就提高了效率。')]),t._v(" "),s("ol",{attrs:{start:"8"}},[s("li")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/202208081459745.png",alt:""}})]),t._v(" "),s("p",[t._v("怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（Partial Match Table）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。")]),t._v(" "),s("ol",{attrs:{start:"9"}},[s("li")]),t._v(" "),s("img",{attrs:{width:"554",alt:"image",src:"https://user-images.githubusercontent.com/41789327/183521981-3c3c7707-21f5-40b1-bfc2-f1932d9b6a4f.png"}}),t._v(" "),s("p",[t._v('已知空格与D不匹配时，前面六个字符"ABCDAB"是匹配的。查表可知，最后一个匹配字符B对应的"部分匹配值"为2，因此按照下面的公式算出向后移动的位数：')]),t._v(" "),s("blockquote",[s("p",[t._v('移动位数 = 已匹配的字符数 - 最后一个匹配字符B对应的"部分匹配值"')])]),t._v(" "),s("p",[t._v('因为已匹配的字符数是6, 最后一个匹配字符B对应的"部分匹配值"为2')]),t._v(" "),s("p",[t._v("因为 6 - 2 等于4，所以将搜索词向后移动4位。")]),t._v(" "),s("ol",{attrs:{start:"10"}},[s("li")]),t._v(" "),s("img",{attrs:{width:"472",alt:"image",src:"https://user-images.githubusercontent.com/41789327/183522057-4e74c071-f64c-4dde-abd6-86ec7976abe4.png"}}),t._v(" "),s("p",[t._v('因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（"AB"），最后一个匹配字符 B 对应的在上面的《部分匹配表》中的"部分匹配值"为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位。')]),t._v(" "),s("ol",{attrs:{start:"11"}},[s("li")]),t._v(" "),s("img",{attrs:{width:"467",alt:"image",src:"https://user-images.githubusercontent.com/41789327/183522098-db3381ac-5e1d-4bff-97f9-8606364bf9cd.png"}}),t._v(" "),s("p",[t._v("因为空格与A不匹配，继续后移一位。")]),t._v(" "),s("ol",{attrs:{start:"12"}},[s("li")]),t._v(" "),s("img",{attrs:{width:"470",alt:"image",src:"https://user-images.githubusercontent.com/41789327/183522144-84140237-bbda-494a-ad14-662975362892.png"}}),t._v(" "),s("p",[t._v('逐位比较，直到发现C与D不匹配。于是，最后一个匹配字符 B 对应的在上面的《部分匹配表》中的"部分匹配值"为2， 移动位数 = 6 - 2，继续将搜索词向后移动4位。')]),t._v(" "),s("ol",{attrs:{start:"13"}},[s("li")]),t._v(" "),s("img",{attrs:{width:"470",alt:"image",src:"https://user-images.githubusercontent.com/41789327/183522211-c82aa5ed-db91-4fd7-8511-0c29e330e22c.png"}}),t._v(" "),s("p",[t._v("逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。")]),t._v(" "),s("ol",{attrs:{start:"14"}},[s("li")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://www.ruanyifeng.com/blogimg/asset/201305/bg2013050114.png",alt:""}})]),t._v(" "),s("p",[t._v("下面介绍《部分匹配表》是如何产生的。")]),t._v(" "),s("p",[t._v('首先，要了解两个概念："前缀"和"后缀"。 "前缀"指'),s("strong",[t._v("除了最后一个字符以外")]),t._v('，一个字符串的全部头部组合；"后缀"指'),s("strong",[t._v("除了第一个字符以外")]),t._v("，一个字符串的全部尾部组合。")]),t._v(" "),s("ol",{attrs:{start:"15"}},[s("li")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/202208081459745.png",alt:""}})]),t._v(" "),s("p",[t._v('"部分匹配值"就是"前缀"和"后缀"的最长的共有元素的长度。以"ABCDABD"为例，')]),t._v(" "),s("blockquote",[s("p",[t._v('－　"A"的前缀和后缀都为空集，共有元素的长度为0；')]),t._v(" "),s("p",[t._v('－　"AB"的前缀为[A]，后缀为[B]，共有元素的长度为0；')]),t._v(" "),s("p",[t._v('－　"ABC"的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；')]),t._v(" "),s("p",[t._v('－　"ABCD"的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；')]),t._v(" "),s("p",[t._v('－　"ABCDA"的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为"A"，长度为1；')]),t._v(" "),s("p",[t._v('－　"ABCDAB"的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为"AB"，长度为2；')]),t._v(" "),s("p",[t._v('－　"ABCDABD"的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。')])]),t._v(" "),s("ol",{attrs:{start:"16"}},[s("li")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://www.ruanyifeng.com/blogimg/asset/201305/bg2013050112.png",alt:""}})]),t._v(" "),s("p",[t._v('"部分匹配"的实质是，有时候，字符串头部和尾部会有重复。比如，"ABCDAB"之中有两个"AB"，那么它的"部分匹配值"就是2（"AB"的长度）。搜索词移动的时候，第一个"AB"向后移动4位（字符串长度-部分匹配值），就可以来到第二个"AB"的位置。')]),t._v(" "),s("h2",{attrs:{id:"python-模版"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python-模版"}},[t._v("#")]),t._v(" python 模版")]),t._v(" "),s("p",[t._v("source: "),s("code",[t._v("https://leetcode.com/problems/find-all-good-strings/discuss/554806/O(N-*-len(evil))-Solution-with-memorized-DP-and-KMP-algorithm")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_kmp_next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('""" get KMP next arrray\n    \n    next[i] is the biggest k s.t. pattern[:k] == pattern[:i + 1][-k:]\n    e.g., for ABCDABD, \n    i = 0: 要让 pattern[:k] == pattern[:1][-k:]， k = 0 => 没有这样的匹配， 对应上面的表上的A\n    i = 1: 要让 pattern[:k] == pattern[:2][-k:]， k = 0 => 没有这样的匹配， 对应上面的表上的B\n    ...\n    i = 4: 要让 pattern[:k] == pattern[:5][-k:], k = 1 => 共有元素为"A"，长度为1, 对应上面表上第二个A\n    i = 5: 要让 pattern[:k] == pattern[:6][-k:], k = 2 => 共有元素为"AB"，长度为2, 对应上面表上第二个B\n    i = 6: 要让 pattern[:k] == pattern[:7][-k:]， k = 0 => 没有这样的匹配， 对应上面的表上的最后一个D\n    """')]),t._v("\n    next_arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    cur_len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" cur_len "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("cur_len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如这个 A A A A A C B A")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 得到     0 1 2 3 4 0 0 1，计算C的时候要用while loop")]),t._v("\n\t\t    cur_len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next_arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("cur_len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("cur_len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\tcur_len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\t\tnext_arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur_len\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" next_arr\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br")])])])}),[],!1,null,null,null);s.default=r.exports}}]);
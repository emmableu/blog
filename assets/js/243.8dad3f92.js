(window.webpackJsonp=window.webpackJsonp||[]).push([[243],{612:function(t,s,a){"use strict";a.r(s);var n=a(9),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/best-meeting-point/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LC link"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://leetcode-cn.com/problems/best-meeting-point/solution/zui-jia-de-peng-tou-di-dian-by-leetcode/",target:"_blank",rel:"noopener noreferrer"}},[t._v("explanation"),s("OutboundLink")],1),t._v(" "),s("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/296-0.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"solution"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#solution"}},[t._v("#")]),t._v(" solution")]),t._v(" "),s("h3",{attrs:{id:"two-pointer-方法-preferred"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#two-pointer-方法-preferred"}},[t._v("#")]),t._v(" two pointer 方法 （preferred）")]),t._v(" "),s("p",[t._v("先把二维降到一维"),s("br"),t._v("\n对于 "),s("code",[t._v("input = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]")]),s("br"),t._v(" "),s("code",[t._v("row_sum = list(map(sum, grid))")]),t._v(",  得到 "),s("code",[t._v("[2, 0, 1]")]),t._v(";"),s("br"),t._v(" "),s("code",[t._v("col_sum = list(map(sum, zip(*grid)))")]),t._v(", 得到"),s("code",[t._v("[1, 0, 1, 0, 1]")]),t._v(";")]),t._v(" "),s("p",[t._v("在一维上：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("left")]),t._v(" 或 "),s("code",[t._v("right")]),t._v(": 有多少人在 [i,j]这个区间的左边/右边"),s("br"),t._v("\n在 "),s("code",[t._v("[0, i]")]),t._v("的人在 i 点meet"),s("br"),t._v("\n在 "),s("code",[t._v("[j, n - 1]")]),t._v(" 的人在 j 点meet."),s("br"),t._v("\n令上文得到的 "),s("code",[t._v("row_sum")]),t._v("或"),s("code",[t._v("col_sum")]),t._v(" 为 "),s("code",[t._v("arr")]),t._v(", 即 "),s("code",[t._v("left = sum(arr[:i+1])")]),t._v(", "),s("code",[t._v("right = sum(arr[j:])")]),t._v(","),s("br"),t._v(" "),s("code",[t._v("d")]),t._v(": 所有左边的人（人数为left）走到i 的总距离 +  所有右边的人（人数为right）走到j 的总距离"),s("br"),t._v("\n目的： "),s("strong",[t._v("let i == j with minimum d")]),s("br"),t._v("\n如果 "),s("code",[t._v("i += 1")]),t._v("， 则 "),s("code",[t._v("d += left")]),t._v("， 因为左边所有人都要都走一步， 同时 left 要 += arr[i]，同理for j"),s("br"),t._v("\n为了让 最终的 "),s("code",[t._v("d")]),t._v(" 最小，我们每次都走对应人数少的点： 如果"),s("code",[t._v("left")]),t._v(" 小就 "),s("code",[t._v("i += 1")]),t._v(", 如果 "),s("code",[t._v("right")]),t._v(" 小 就 "),s("code",[t._v("j -= 1")]),t._v(", "),s("code",[t._v("i == j")]),t._v(" 时停止"),s("br"),t._v("\n把两个维度上的结果相加."),s("br"),t._v("\n时间复杂度 O(mn)， 空间复杂度 O(m+n)")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("minTotalDistance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" grid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        row_sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" grid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        col_sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("zip")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("grid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("minTotalDistance1D")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" left\n                    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n                    left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" right\n                    j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n                    right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" d\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" minTotalDistance1D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("row_sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" minTotalDistance1D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("col_sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br")])]),s("h3",{attrs:{id:"找median-not-preferrred"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#找median-not-preferrred"}},[t._v("#")]),t._v(" 找median （not preferrred)")]),t._v(" "),s("p",[t._v("定理：在一个一维的数轴上，到每个点的距离之和最小的点在median中位数上")]),t._v(" "),s("p",[t._v("证明方法： 求导， 见下图\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/296-1.png",alt:""}})])])}),[],!1,null,null,null);s.default=e.exports}}]);
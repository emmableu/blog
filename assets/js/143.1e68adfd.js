(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{512:function(t,s,n){"use strict";n.r(s);var e=n(9),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/longest-arithmetic-subsequence/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LC link"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/emmableu/image/master/1027-0.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"solution"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#solution"}},[t._v("#")]),t._v(" Solution")]),t._v(" "),s("p",[t._v("对于数组问题，如果寻找连续子数组，可以使用双指针法或滑动窗口等方法，但是对于非连续子数组，最好使用动态规划。")]),t._v(" "),s("p",[t._v("【数组定义】"),s("br"),t._v("\n这道题特殊的是，我们不仅需要知道当前的遍历信息，也就是两个数字之间的差值，还需要知道历史信息，也就是曾经遍历时是否出现过差值一样的情况。对于需要知道历史信息的遍历过程，我们使用hashmap作为暂存器，达到快速检索的功能。\n定义字典"),s("code",[t._v("dp")]),t._v("，字典的键是一个元组"),s("code",[t._v("(index, step)")]),t._v("，表示以index处元素结尾的等差数列的步长step，字典的值是该等差数列的长度。举个例子，对于数组"),s("code",[t._v("[1,2,3,5,9,11,12,15]")]),t._v("，字典"),s("code",[t._v("{(6, 3):3}")]),t._v("表达的含义就是以"),s("code",[t._v("A[6]=15")]),t._v("结尾，步长为"),s("code",[t._v("3")]),t._v("的等差数列的长度为"),s("code",[t._v("3")]),t._v("，也就是"),s("code",[t._v("[9,12,15]")]),t._v("。")]),t._v(" "),s("p",[t._v("【初始状态】"),s("br"),t._v("\n将字典"),s("code",[t._v("dp")]),t._v("设置为空即可，我们要在里面添加元素。"),s("br"),t._v("\n【递推公式】"),s("br"),t._v(" "),s("code",[t._v("dp")]),t._v("的填充需要两重嵌套，成对的研究数组中两个位置"),s("code",[t._v("prev")]),t._v("，"),s("code",[t._v("end")]),t._v(", "),s("code",[t._v("prev")]),t._v("是给定"),s("code",[t._v("end")]),t._v("的点之后遍历"),s("code",[t._v("end")]),t._v("之前左右的点得到。"),s("br"),t._v(" "),s("code",[t._v("prev<end")]),t._v("，它们的差值"),s("code",[t._v("step = A[end] - A[prev]")]),t._v("，我们就要看了，")]),t._v(" "),s("ul",[s("li",[t._v("如果"),s("code",[t._v("(prev, step)")]),t._v("已经出现在"),s("code",[t._v("dp")]),t._v(", 则说明"),s("code",[t._v("end")]),t._v("位置所在元素可以接在以"),s("code",[t._v("prev")]),t._v("结尾，以"),s("code",[t._v("step")]),t._v("为步长的等差数组中，则"),s("code",[t._v("dp")]),t._v("数组中添加状态"),s("code",[t._v("dp[(end, step)]=dp[(prev, step)]+1")]),t._v("，加一意思是加入了"),s("code",[t._v("end")]),t._v("位置处的元素，")]),t._v(" "),s("li",[t._v("如果"),s("code",[t._v("(prev, step)")]),t._v("在"),s("code",[t._v("dp")]),t._v("中不存在, 说明"),s("code",[t._v("end")]),t._v("和"),s("code",[t._v("prev")]),t._v("确定了一个新的只含有两个元素的等差数组，"),s("code",[t._v("dp[(end, step)]=2")]),t._v("，"),s("br"),t._v("\n两种情况合二为一，就是"),s("code",[t._v("dp[(end, step)] = dp.get((prev, step), 1) + 1")]),t._v("。"),s("br"),t._v("\n遍历过程中，需要及时的更新最终结果"),s("code",[t._v("res = max(res, dp[(end, step)])")])])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("longestArithSeqLength")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        dp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" end "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" prev "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                step "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" step"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" step"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);